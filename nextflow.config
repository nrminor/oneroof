params {

    // a help parameter for print all the available parameters.
    help = null

    /*
    a bed file of primer coordinates relative to the reference provided with the
    parameters `refseq` and `ref_gbk`.
    */
    primer_bed = null

    // suffixes in the primer bed file denoting whether a primer is forward or reverse
    fwd_suffix = "_LEFT"
    rev_suffix = "_RIGHT"

    // The reference sequence to be used for mapping in FASTA format.
    refseq = null

    // The reference sequence to be used for variant annotation in Genbank format.
    ref_gbk = null

    /*
    A remote location to use with a ssh client to watch for pod5 files in
    realtime as they are generated by the sequencing instrument.
    */
    remote_pod5_location = ""

    /*
    Configuration file for remote file monitoring. An example can be found at
    conf/file_watcher.template.yml
    */
    file_watcher_config = ""

    // where to cache pod5s as they arrive from the remote location
    pod5_staging = "$launchDir/pod5_cache"

    /* If a remote pod5 location isn't given, users may provide a local,
    on-device directory where pod5 files have been manually transferred.
    */
    pod5_dir = ""

    /*
    A local directory to watch for Nanopore FASTQs or BAMs as the become
    available. This is for cases where basecalling is being performed via another
    workflow, resulting in BAMs or FASTQs that are gradually transferred into
    `params.precalled_staging` as basecalling completes.
    */
    precalled_staging = ""

    /*
    If pod5 files have already been basecalled and demultiplexed, users can
    specify their location with prepped data.
    */
    prepped_data = ""

    /*
    If users have Illumina data to be processed, they may specify their
    paired-end FASTQ files' location with `illumina_fastq_dir`.
    */
    illumina_fastq_dir = ""

    /*
    the Nanopore basecalling model to apply to the provided pod5 data (defaults
    to the latest super-accuracy version)
    */
    model = "sup@latest"

    /*
    where to cache the models locally (defaults to a directory called models/
    that will be placed alongside the other workflow files). Models will only be
    downloaded upon the user's first execution of the workflow unless the user
    deletes the models directory.
    */
    model_cache = "$launchDir/work/basecalling_models"

    // The Nanopore barcoding kit used to prepare sequencing libraries.
    kit = null

    /*
    How many pod5 files to basecall at once. With a single available GPU, all
    pod5 files should be basecalled together, so this parameter defaults to
    telling Nextflow to take all pod5 files at once.
    */
    pod5_batch_size = null

    /*
    If basecalling pod5 files is to be parallelized across multiple available
    GPUs, this parameter tells Nextflow how many parallel instances of the
    basecaller to run at once (defaults to 1).
    */
    basecall_max = 1

    // the maximum acceptable length for a given read
    max_len = 12345678910

    // the minimum acceptable length for a given read
    min_len = 1

    // the minimum acceptable average quality for a given read
    min_qual = 20

    /*
    Whether to turn on secondary alignments for each amplicon. Secondary alignments can
    increase depth at the cost of more reads potentially mapping to the wrong locations.
    By default, secondary alignments are off.
    */
    secondary = null

    /*
    The maximum number of mismatches to allow when finding primers (defaults
    to 0)
    */
    max_mismatch = 0

    // Desired coverage to downsample to, with a sentinal value of 0 to indicate 0 downsampling
    downsample_to = 0

    /*
    The minimum required frequency of a variant base to be included in a consensus
    sequence.
    */
    min_consensus_freq = 0.5

    // The minimum required read support to report an amplicon-haplotype
    min_haplo_reads = 2

    /*
    Where to cache a custom snpEff database (defaults to a directory called
    snpEff_cache/ that will be placed alongside the other workflow files). Like
    with the model data, this database will only be generated upon the user's
    first execution of the workflow unless the user deletes the snpEff_cache
    directory
    */
    snpeff_cache = "$launchDir/work/snpEff_cache"

    // Minimum depth of coverage
    min_depth_coverage = 10

    // nextclade dataset
    nextclade_dataset = null

	// devider haplotype phasing preset
	devider_preset = "nanopore-r10" // old-long-reads, nanopore-r9, nanopore-r10, hi-fi

    // nextclade dataset cache
    nextclade_cache = "$launchDir/work/nextclade_datasets"

    // Whether to plot multisample coverages with a log scale
    log = null

    // Where to place results
    results = "$launchDir/results"

    // whether to cleanup work directory after a successful run (defaults to false)
    cleanup = null


    // parameters that generally should not be overwritten in normal use cases
    // ---------------------------------------------------------------------- //

    // snpEff config file
    snpEff_config = "$projectDir/conf/snpeff.config"

  // email address to notify on completion. Multiple comma dilimeted emails may be provided.
    email = null

}

// load platform-specific configurations
if ( params.remote_pod5_location != "" || params.pod5_dir != "" || params.precalled_staging || params.prepped_data ) {
    includeConfig "conf/nanopore.config"
} else if ( params.illumina_fastq_dir != "" ) {
    includeConfig "conf/illumina.config"
}


// WHETHER TO GENERATE A REPORT OF RUN STATISTICS
report {
    enabled = true
		overwrite = true
    file    = "${params.results}/report.html"
}


// WHETHER TO GENERATE A VISUALIZATION OF THE WORKFLOW
dag {
	enabled = true
	overwrite = true
	file = "${params.results}/workflow-visualization.png"
}


// WHETHER TO REMOVE TEMPORARY FILES AFTER A SUCCESSFUL RUN
cleanup = params.cleanup


// PROFILE OPTIONS
profiles {

	standard {

		docker.enabled = true
		singularity.enabled = false
		conda.enabled = false

		process.container = "nrminor/dorado-and-friends:v0.2.3"

	}

	docker {

		docker.enabled = true
		singularity.enabled = false
		conda.enabled = false

		process.container = "nrminor/dorado-and-friends:v0.2.3"

	}

	singularity {

		singularity.enabled = true
		docker.enabled = false
		conda.enabled = false

		process.container = "docker://nrminor/dorado-and-friends:v0.2.3"

	}

	apptainer {

		apptainer.enabled = true
		docker.enabled = false
		conda.enabled = false

		process.container = "docker://nrminor/dorado-and-friends:v0.2.3"

	}

  containerless {

		apptainer.enabled = false
		docker.enabled = false
		conda.enabled = false

    }
}


// MANIFEST
manifest {
	name = "oneroof"
	homePage = 'https://github.com/nrminor/oneroof'
	mainScript = 'main.nf'
	defaultBranch = 'main'
	description = 'Base-, Variant-, and Consensus-calling under One Proverbial Roof.'
	author = 'Nicholas R. Minor'
}
